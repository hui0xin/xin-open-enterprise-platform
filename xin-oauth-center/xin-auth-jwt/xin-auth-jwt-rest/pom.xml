<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.xin.commons</groupId>
        <artifactId>xin-auth-jwt</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>xin-auth-jwt-rest</artifactId>
    <version>${projects.version}</version>
    <name>${project.artifactId}</name>
    <description>上传下载服务</description>

    <properties>
        <start-class>com.xin.auth.jwt.AuthJWTApplication</start-class>
        <!--docker config-->
        <push.image>true</push.image>
        <docker.serverId>docker-hub</docker.serverId>
        <docker.repostory>core-harbor.xxx.com</docker.repostory>
        <docker.registry.name>repository_xin</docker.registry.name>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.xin.commons</groupId>
            <artifactId>xin-auth-jwt-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.ctrip.framework.apollo</groupId>
            <artifactId>apollo-client</artifactId>
        </dependency>
        <!--注册中心客户端 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>
        <!-- spring-boot-starter-actuator 管理工具/web 查看堆栈，动态刷新配置 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>local</id>
            <properties>
                <props>local.properties</props>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>dev</id>
            <properties>
                <props>dev.properties</props>
            </properties>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <props>test.properties</props>
            </properties>
        </profile>
        <profile>
            <id>prod</id>
            <properties>
                <props>prod.properties</props>
            </properties>
        </profile>
    </profiles>
    <build>
        <finalName>${project.parent.artifactId}-${projects.version}</finalName>
        <filters>
            <filter>src/main/resources/config/${props}</filter>
        </filters>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <!--启用过滤 true:替换   false:不替换-->
                <filtering>true</filtering>
                <excludes>
                    <exclude>logs/*.xml</exclude>
                    <exclude>messages/**</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <!-- 过滤指定路径下的配置文件属性 -->
                <includes>
                    <include>logs/*.xml</include>
                    <include>messages/**</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!--如果没有该配置，devtools不会生效-->
                    <fork>true</fork>
                </configuration>
            </plugin>
<!--            <plugin>-->
<!--                <groupId>com.spotify</groupId>-->
<!--                <artifactId>docker-maven-plugin</artifactId>-->
<!--                <version>1.2.0</version>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        &lt;!&ndash; 要绑定到的生命周期的阶段 &ndash;&gt;-->
<!--                        <id>default</id>-->
<!--                        &lt;!&ndash; 要绑定到的生命周期的阶段 &ndash;&gt;-->
<!--                        <phase>install</phase>-->
<!--                        &lt;!&ndash; 要绑定的插件的目标 &ndash;&gt;-->
<!--                        <goals>-->
<!--                            <goal>build</goal>-->
<!--                            <goal>push</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->

<!--                <configuration>-->
<!--                    &lt;!&ndash; 私有仓库配置，需要settings.xml文件配合serverId对应的服务地址 &ndash;&gt;-->
<!--                    <serverId>${docker.serverId}</serverId>-->
<!--                    &lt;!&ndash;配置 registryUrl&ndash;&gt;-->
<!--                    <registryUrl>${docker.repostory}</registryUrl>-->
<!--                    &lt;!&ndash;这个是用来打docker包的，如果本地没有安装docker，就需要借助环境上的docker来打包&ndash;&gt;-->
<!--                    &lt;!&ndash;<dockerHost>${docker.repostory}</dockerHost>&ndash;&gt;-->
<!--                    &lt;!&ndash;用来指定镜像名称&ndash;&gt;-->
<!--                    <imageName>-->
<!--                        ${docker.repostory}/${docker.registry.name}/${project.parent.artifactId}:${projects.version}-->
<!--                    </imageName>-->
<!--                    &lt;!&ndash;是否需要push到docker hub上&ndash;&gt;-->
<!--                    <pushImage>false</pushImage>-->
<!--                    &lt;!&ndash;<pushImage>${push.image}</pushImage>&ndash;&gt;-->
<!--                    &lt;!&ndash;覆盖相同标签镜像&ndash;&gt;-->
<!--                    <forceTags>true</forceTags>-->
<!--                    &lt;!&ndash;镜像tags&ndash;&gt;-->
<!--                    <imageTags>-->
<!--                        <imageTag>${projects.version}</imageTag>-->
<!--                    </imageTags>-->
<!--                    &lt;!&ndash;Dockerfile的位置 &ndash;&gt;-->
<!--                    <dockerDirectory>src/main/docker</dockerDirectory>-->
<!--                    &lt;!&ndash;配置会将dockerDirectory的内容拷贝值${project.build.directory}/docker&ndash;&gt;-->
<!--                    <resources>-->
<!--                        <resource>-->
<!--                            <targetPath>/</targetPath>-->
<!--                            <directory>${project.build.directory}</directory>-->
<!--                            <include>${project.build.finalName}.jar</include>-->
<!--                        </resource>-->
<!--                    </resources>-->
<!--                    &lt;!&ndash;为了提供给Dockerfile通过 ${JAR_FILE} 使用&ndash;&gt;-->
<!--                    <buildArgs>-->
<!--                        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>-->
<!--                    </buildArgs>-->
<!--                </configuration>-->
<!--            </plugin>-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-deploy-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
